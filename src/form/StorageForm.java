/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javaClass.Code;
import javaClass.Excel;
import javaClass.GrassMedicinePill;
import javaClass.GrassMedicinePotion;
import javaClass.Medicine;
import javaClass.TraditionalMedicinePill;
import javaClass.TraditionalMedicinePotion;
import javaClass.User;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author Sheng
 */
public class StorageForm extends javax.swing.JFrame {

    /**
     * Creates new form StorageForm
     */
    private User user;
    private String userid = "";
    DefaultTableModel model ;
    TableModel tablemodel;
    JTable table;
    private int firstReferenceGrassMedicinePill = 0;
    private int firstReferenceGrassMedicinePotion = 0;
    private int firstReferenceTraditionalMedicinePill = 0;
    private int firstReferenceTraditionalMedicinePotion = 0;
        
    public StorageForm() {
        initComponents();
    }

    public StorageForm(User user) throws SQLException {
        initComponents();
        this.user = user;
        userid = user.getUserid();
        comboReference(comboBoxMedicine.getSelectedItem().toString());
        jScrollPane1.getViewport().setBackground(Color.WHITE);
        
        createColumns();
        show_table();
        color_table();
        widthTable();
        image();
        //getNewRenderedTable(table);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        panelHeader = new javax.swing.JPanel();
        lbllogo = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        findHeader = new javax.swing.JLabel();
        panelBody = new javax.swing.JPanel();
        btnFindMedic = new javax.swing.JButton();
        comboReferenceGrassPill = new javax.swing.JComboBox<>();
        comboBoxMedicine = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStorage = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnExcel = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        comboMedicineNameGrassPill = new javax.swing.JComboBox<>();
        comboMedicineNameGrassPotion = new javax.swing.JComboBox<>();
        comboBoxNameTraditionalPill = new javax.swing.JComboBox<>();
        comboReferenceGrassPotion = new javax.swing.JComboBox<>();
        comboBoxNameTraditionalPotion = new javax.swing.JComboBox<>();
        comboBoxReferenceTraditionalPill = new javax.swing.JComboBox<>();
        comboBoxReferenceTraditionalPotion = new javax.swing.JComboBox<>();
        btnReset = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel5.setLayout(null);

        panelHeader.setBackground(new java.awt.Color(255, 204, 204));
        panelHeader.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelHeader.setForeground(new java.awt.Color(153, 153, 153));
        panelHeader.setLayout(null);
        panelHeader.add(lbllogo);
        lbllogo.setBounds(14, 2, 231, 70);

        jLabel20.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        jLabel20.setText("登入：");
        panelHeader.add(jLabel20);
        jLabel20.setBounds(1100, 0, 75, 70);

        lblName.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        panelHeader.add(lblName);
        lblName.setBounds(1190, 0, 127, 70);

        findHeader.setFont(new java.awt.Font("STXihei", 1, 24)); // NOI18N
        findHeader.setText("创库");
        panelHeader.add(findHeader);
        findHeader.setBounds(510, 0, 200, 70);

        jPanel5.add(panelHeader);
        panelHeader.setBounds(0, 0, 1370, 70);

        panelBody.setBackground(new java.awt.Color(255, 255, 255));
        panelBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.setLayout(null);

        btnFindMedic.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        btnFindMedic.setText("寻找");
        btnFindMedic.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        btnFindMedic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindMedicActionPerformed(evt);
            }
        });
        panelBody.add(btnFindMedic);
        btnFindMedic.setBounds(440, 440, 130, 50);

        comboReferenceGrassPill.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboReferenceGrassPill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboReferenceGrassPillActionPerformed(evt);
            }
        });
        panelBody.add(comboReferenceGrassPill);
        comboReferenceGrassPill.setBounds(170, 180, 280, 40);

        comboBoxMedicine.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboBoxMedicine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "复方药粉", "药丸", "药水", "单味药粉" }));
        comboBoxMedicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxMedicineActionPerformed(evt);
            }
        });
        panelBody.add(comboBoxMedicine);
        comboBoxMedicine.setBounds(170, 70, 280, 40);

        jLabel1.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel1.setText("病症分类:");
        panelBody.add(jLabel1);
        jLabel1.setBounds(70, 180, 90, 40);

        jLabel2.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel2.setText("药物分类:");
        panelBody.add(jLabel2);
        jLabel2.setBounds(70, 70, 90, 40);

        btnBack.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        btnBack.setText("退出");
        btnBack.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        panelBody.add(btnBack);
        btnBack.setBounds(20, 440, 130, 50);

        tblStorage.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        tblStorage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "药", "病症分类", "药物名称", "ID", "重量", "本钱", "价格"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblStorage.setRowHeight(25);
        jScrollPane1.setViewportView(tblStorage);

        jScrollPane2.setViewportView(jScrollPane1);

        panelBody.add(jScrollPane2);
        jScrollPane2.setBounds(580, 50, 670, 360);

        jPanel2.setBackground(new java.awt.Color(151, 254, 63));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.add(jPanel2);
        jPanel2.setBounds(1170, 440, 30, 30);

        jLabel3.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel3.setText("足够");
        panelBody.add(jLabel3);
        jLabel3.setBounds(1210, 440, 90, 30);

        jPanel3.setBackground(new java.awt.Color(254, 115, 63));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.add(jPanel3);
        jPanel3.setBounds(870, 440, 30, 30);

        jLabel4.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel4.setText("即将完");
        panelBody.add(jLabel4);
        jLabel4.setBounds(910, 440, 90, 30);

        jPanel4.setBackground(new java.awt.Color(254, 254, 63));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        panelBody.add(jPanel4);
        jPanel4.setBounds(1020, 440, 30, 30);

        jLabel5.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel5.setText("不足够");
        panelBody.add(jLabel5);
        jLabel5.setBounds(1060, 440, 90, 30);

        btnExcel.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        btnExcel.setText("Excel");
        btnExcel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });
        panelBody.add(btnExcel);
        btnExcel.setBounds(160, 440, 130, 50);

        jLabel6.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        jLabel6.setText("药物名称:");
        panelBody.add(jLabel6);
        jLabel6.setBounds(70, 300, 90, 40);

        comboMedicineNameGrassPill.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboMedicineNameGrassPill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMedicineNameGrassPillActionPerformed(evt);
            }
        });
        panelBody.add(comboMedicineNameGrassPill);
        comboMedicineNameGrassPill.setBounds(170, 300, 280, 40);

        comboMedicineNameGrassPotion.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboMedicineNameGrassPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMedicineNameGrassPotionActionPerformed(evt);
            }
        });
        panelBody.add(comboMedicineNameGrassPotion);
        comboMedicineNameGrassPotion.setBounds(170, 300, 280, 40);

        comboBoxNameTraditionalPill.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        panelBody.add(comboBoxNameTraditionalPill);
        comboBoxNameTraditionalPill.setBounds(170, 300, 280, 40);

        comboReferenceGrassPotion.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboReferenceGrassPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboReferenceGrassPotionActionPerformed(evt);
            }
        });
        panelBody.add(comboReferenceGrassPotion);
        comboReferenceGrassPotion.setBounds(170, 180, 280, 40);

        comboBoxNameTraditionalPotion.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        panelBody.add(comboBoxNameTraditionalPotion);
        comboBoxNameTraditionalPotion.setBounds(170, 300, 280, 40);

        comboBoxReferenceTraditionalPill.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboBoxReferenceTraditionalPill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxReferenceTraditionalPillActionPerformed(evt);
            }
        });
        panelBody.add(comboBoxReferenceTraditionalPill);
        comboBoxReferenceTraditionalPill.setBounds(170, 180, 280, 40);

        comboBoxReferenceTraditionalPotion.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        comboBoxReferenceTraditionalPotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxReferenceTraditionalPotionActionPerformed(evt);
            }
        });
        panelBody.add(comboBoxReferenceTraditionalPotion);
        comboBoxReferenceTraditionalPotion.setBounds(170, 180, 280, 40);

        btnReset.setFont(new java.awt.Font("STXihei", 1, 18)); // NOI18N
        btnReset.setText("重启");
        btnReset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        panelBody.add(btnReset);
        btnReset.setBounds(300, 440, 130, 50);

        jPanel5.add(panelBody);
        panelBody.setBounds(60, 90, 1270, 530);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(153, 153, 153), new java.awt.Color(153, 153, 153)));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel14.setText("CopyRight © Heng Seng Tong");
        jPanel6.add(jLabel14);

        jPanel5.add(jPanel6);
        jPanel6.setBounds(0, 650, 1370, 50);

        getContentPane().add(jPanel5);
        jPanel5.setBounds(0, 0, 1380, 990);

        setBounds(0, 0, 1387, 743);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindMedicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindMedicActionPerformed
        // TODO add your handling code here:
        Find();
    }//GEN-LAST:event_btnFindMedicActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        MainMenu menu = new MainMenu(user);
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // TODO add your handling code here:
        Excel exc = new Excel();
        int result = 0;
        result = exc.countModel(model, "Storage");
        if(result == 1)
        {
            JOptionPane.showMessageDialog(rootPane, "转换成功Excel名字叫Storage.xlsx");
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "确保你删掉旧的Storage.xlsx才来转换");
        }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void comboReferenceGrassPillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboReferenceGrassPillActionPerformed
        // TODO add your handling code here:
        try {
            medicineName(comboBoxMedicine.getSelectedItem().toString(), comboReferenceGrassPill.getSelectedItem().toString());
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_comboReferenceGrassPillActionPerformed

    private void comboReferenceGrassPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboReferenceGrassPotionActionPerformed
        // TODO add your handling code here:
         try {
            medicineName(comboBoxMedicine.getSelectedItem().toString(), comboReferenceGrassPotion.getSelectedItem().toString());
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_comboReferenceGrassPotionActionPerformed

    private void comboBoxReferenceTraditionalPillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxReferenceTraditionalPillActionPerformed
        // TODO add your handling code here:
        try {
            medicineName(comboBoxMedicine.getSelectedItem().toString(), comboBoxReferenceTraditionalPill.getSelectedItem().toString());
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_comboBoxReferenceTraditionalPillActionPerformed

    private void comboBoxReferenceTraditionalPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxReferenceTraditionalPotionActionPerformed
        // TODO add your handling code here:
        try {
            medicineName(comboBoxMedicine.getSelectedItem().toString(), comboBoxReferenceTraditionalPotion.getSelectedItem().toString());
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_comboBoxReferenceTraditionalPotionActionPerformed

    private void comboMedicineNameGrassPillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMedicineNameGrassPillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboMedicineNameGrassPillActionPerformed

    private void comboMedicineNameGrassPotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMedicineNameGrassPotionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboMedicineNameGrassPotionActionPerformed

    private void comboBoxMedicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxMedicineActionPerformed
        try {
            // TODO add your handling code here:
            String medicine = comboBoxMedicine.getSelectedItem().toString();
            comboReference(medicine);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_comboBoxMedicineActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        try {
            // TODO add your handling code here:
            show_table();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnResetActionPerformed

    private void createColumns()
    {
        model = (DefaultTableModel) tblStorage.getModel();
    }
    
    public void medicineName(String name, String reference) throws SQLException
    {
        comboMedicineNameGrassPill.removeAllItems();
        comboBoxNameTraditionalPill.removeAllItems();
        comboMedicineNameGrassPotion.removeAllItems();
        comboBoxNameTraditionalPotion.removeAllItems();
        if(name.equalsIgnoreCase("单味药粉"))
        {
            TraditionalMedicinePill pill = new TraditionalMedicinePill();

            for(int i = 0; i < pill.comboNameReference(name,reference,userid).size(); i++)
            {
               comboBoxNameTraditionalPill.addItem(pill.comboNameReference(name,reference,userid).get(i).getName());  
               AutoCompleteDecorator.decorate(comboBoxNameTraditionalPill);
            }
            TraditionalPillName();
        }
        else if(name.equalsIgnoreCase("药水"))
        {
            GrassMedicinePotion potion = new GrassMedicinePotion();

            for(int i = 0; i < potion.comboNameReference(name,reference,userid).size(); i++)
            {
                comboMedicineNameGrassPotion.addItem(potion.comboNameReference(name,reference,userid).get(i).getName());
                AutoCompleteDecorator.decorate(comboMedicineNameGrassPotion);
            }
            GrassPotionName();
        }
        else if(name.equalsIgnoreCase("药丸"))
        {
            GrassMedicinePill pill = new GrassMedicinePill();

            for(int i = 0; i < pill.comboNameReference(name,reference,userid).size(); i++)
            {
                comboMedicineNameGrassPill.addItem(pill.comboNameReference(name,reference,userid).get(i).getName());
                AutoCompleteDecorator.decorate(comboMedicineNameGrassPill);
            }
            GrassPillName();
        }
        else if(name.equalsIgnoreCase("复方药粉"))
        {
            TraditionalMedicinePotion potion = new TraditionalMedicinePotion();

            for(int i = 0; i < potion.comboNameReference(name,reference,userid).size(); i++)
            {
                comboBoxNameTraditionalPotion.addItem(potion.comboNameReference(name,reference,userid).get(i).getName());
                AutoCompleteDecorator.decorate(comboBoxNameTraditionalPotion);
            }
            TraditionalPotionName();
        }
    }
    
    public void TraditionalPillName()
    {
        comboMedicineNameGrassPill.setVisible(false);
        comboMedicineNameGrassPotion.setVisible(false);
        comboBoxNameTraditionalPill.setVisible(true);
        comboBoxNameTraditionalPotion.setVisible(false);
        btnFindMedic.setEnabled(true);
    }
    
    public void GrassPotionName()
    {
        comboMedicineNameGrassPill.setVisible(false);
        comboMedicineNameGrassPotion.setVisible(true);
        comboBoxNameTraditionalPill.setVisible(false);
        comboBoxNameTraditionalPotion.setVisible(false);
        btnFindMedic.setEnabled(true);
    }
    
    public void GrassPillName()
    {
        comboMedicineNameGrassPill.setVisible(true);
        comboMedicineNameGrassPotion.setVisible(false);
        comboBoxNameTraditionalPill.setVisible(false);
        comboBoxNameTraditionalPotion.setVisible(false);
        btnFindMedic.setEnabled(true);
    }
    
    public void TraditionalPotionName()
    {
        comboMedicineNameGrassPill.setVisible(false);
        comboMedicineNameGrassPotion.setVisible(false);
        comboBoxNameTraditionalPill.setVisible(false);
        comboBoxNameTraditionalPotion.setVisible(true);
        btnFindMedic.setEnabled(true);
    }
    
    public void comboReference(String medicine) throws SQLException
    {
        System.out.println("fufang:"+medicine);
        //comboReferenceGrassPill.removeAllItems();
        String repeat = "";
        if(medicine.equalsIgnoreCase("药丸") && firstReferenceGrassMedicinePill == 0)
        {
            GrassMedicinePill grasspill = new GrassMedicinePill();

            List<GrassMedicinePill> medicList = new ArrayList<GrassMedicinePill>();
            medicList = grasspill.findReference(medicine, userid);

            for(int i =0; i<medicList.size(); i++)
            {
                if(repeat.equalsIgnoreCase("") || !repeat.equalsIgnoreCase(medicList.get(i).getReference()))
                {
                    comboReferenceGrassPill.addItem(medicList.get(i).getReference());
                    repeat = medicList.get(i).getReference();
                    //AutoCompleteDecorator.decorate(comboReference);
                }
            }
            firstReferenceGrassMedicinePill = 1;
            GrassPillReference();
            //medicineName(medicine,medicList.get(0).getReference());
        }
        else if(medicine.equalsIgnoreCase("药水") && firstReferenceGrassMedicinePotion == 0)
        {
            GrassMedicinePotion grasspotion = new GrassMedicinePotion();

            List<GrassMedicinePotion> grassList = new ArrayList<GrassMedicinePotion>();
            grassList = grasspotion.findReference(medicine,userid);

            for(int i =0; i<grassList.size(); i++)
            {
                if(repeat.equalsIgnoreCase("") || !repeat.equalsIgnoreCase(grassList.get(i).getReference()))
                {
                    comboReferenceGrassPotion.addItem(grassList.get(i).getReference());
                    repeat = grassList.get(i).getReference();
                    //AutoCompleteDecorator.decorate(comboReference);
                }
            }
            firstReferenceGrassMedicinePotion = 1;
            GrassPotionReference();
            //medicineName(medicine,grassList.get(0).getReference());
        }
        else if(medicine.equalsIgnoreCase("单味药粉") && firstReferenceTraditionalMedicinePill == 0)
        {
            TraditionalMedicinePill traditionalpill = new TraditionalMedicinePill();

            List<TraditionalMedicinePill> traditionPillList = new ArrayList<TraditionalMedicinePill>();
            traditionPillList = traditionalpill.findReference(medicine,userid);

            for(int i =0; i<traditionPillList.size(); i++)
            {
                if(repeat.equalsIgnoreCase("") || !repeat.equalsIgnoreCase(traditionPillList.get(i).getReference()))
                {
                    comboBoxReferenceTraditionalPill.addItem(traditionPillList.get(i).getReference());
                    repeat = traditionPillList.get(i).getReference();
                    //AutoCompleteDecorator.decorate(comboReference);
                }
            }
            firstReferenceTraditionalMedicinePill = 1;
            TraditionalPillReference();
            //medicineName(medicine,traditionPillList.get(0).getReference());
        }
        else if(medicine.equalsIgnoreCase("复方药粉") && firstReferenceTraditionalMedicinePotion == 0)
        { 
            TraditionalMedicinePotion traditionalpotion = new TraditionalMedicinePotion();

            List<TraditionalMedicinePotion> traditionMedicList = new ArrayList<TraditionalMedicinePotion>();
            traditionMedicList = traditionalpotion.findReference(medicine,userid);

            for(int i =0; i<traditionMedicList.size(); i++)
            {
                if(repeat.equalsIgnoreCase("") || !repeat.equalsIgnoreCase(traditionMedicList.get(i).getReference()))
                {
                    comboBoxReferenceTraditionalPotion.addItem(traditionMedicList.get(i).getReference());
                    repeat = traditionMedicList.get(i).getReference();
                    //AutoCompleteDecorator.decorate(comboReference);
                }
            }
            firstReferenceTraditionalMedicinePotion = 1;
            TraditionalPotionReference();
            //medicineName(medicine,traditionMedicList.get(0).getReference());
        }
        else if (medicine.equalsIgnoreCase("药丸") && firstReferenceGrassMedicinePill == 1 )
        {
            GrassPillReference();
        }
        else if(medicine.equalsIgnoreCase("药水") && firstReferenceGrassMedicinePotion == 1)
        {
            GrassPotionReference();
        }
        else if(medicine.equalsIgnoreCase("单味药粉") && firstReferenceTraditionalMedicinePill == 1)
        {
            TraditionalPillReference();
        }
        else if(medicine.equalsIgnoreCase("复方药粉") && firstReferenceTraditionalMedicinePotion == 1)
        {
            TraditionalPotionReference();
        }
    }
    
    public void TraditionalPillReference()
    {
        comboReferenceGrassPill.setVisible(false);
        comboReferenceGrassPotion.setVisible(false);
        comboBoxReferenceTraditionalPill.setVisible(true);
        comboBoxReferenceTraditionalPotion.setVisible(false);
    }
    
    public void GrassPotionReference()
    {
        comboReferenceGrassPill.setVisible(false);
        comboReferenceGrassPotion.setVisible(true);
        comboBoxReferenceTraditionalPill.setVisible(false);
        comboBoxReferenceTraditionalPotion.setVisible(false);
    }
    
    public void GrassPillReference()
    {
        comboReferenceGrassPill.setVisible(true);
        comboReferenceGrassPotion.setVisible(false);
        comboBoxReferenceTraditionalPill.setVisible(false);
        comboBoxReferenceTraditionalPotion.setVisible(false);
    }
    
    public void TraditionalPotionReference()
    {
        comboReferenceGrassPill.setVisible(false);
        comboReferenceGrassPotion.setVisible(false);
        comboBoxReferenceTraditionalPill.setVisible(false);
        comboBoxReferenceTraditionalPotion.setVisible(true);
    }
    
    public String MedicineReference()
    {
        String reference="";
        if(comboReferenceGrassPill.isVisible() == true)
        {
            reference = comboReferenceGrassPill.getSelectedItem().toString();
        }
        else if(comboReferenceGrassPotion.isVisible() == true)
        {
            reference = comboReferenceGrassPotion.getSelectedItem().toString();
        }
        else if(comboBoxReferenceTraditionalPill.isVisible() == true)
        {
            reference = comboBoxReferenceTraditionalPill.getSelectedItem().toString();
        }
        else if(comboBoxReferenceTraditionalPotion.isVisible() == true)
        {
            reference = comboBoxReferenceTraditionalPotion.getSelectedItem().toString();
        }
        return reference;
    }
    
    public String MedicineName()
    {
        String medicName = "";
        
        if(comboMedicineNameGrassPill.isVisible() == true)
        {
            medicName = comboMedicineNameGrassPill.getSelectedItem().toString();
        }
        else if(comboMedicineNameGrassPotion.isVisible() == true)
        {
            medicName = comboMedicineNameGrassPotion.getSelectedItem().toString();
        }
        else if(comboBoxNameTraditionalPill.isVisible() == true)
        {
            medicName = comboBoxNameTraditionalPill.getSelectedItem().toString();
        }
        else if(comboBoxNameTraditionalPotion.isVisible() == true)
        {
            medicName = comboBoxNameTraditionalPotion.getSelectedItem().toString();
        }
        return medicName;
    }
    
    public void show_table() throws SQLException
    {
        model.setRowCount(0);
        Medicine medicine = new Medicine();
        List<Medicine> medicineList = new ArrayList<Medicine>();
        try {
                medicineList = medicine.getAllDetail(userid);
                model = (DefaultTableModel) tblStorage.getModel();
                Object row[] = new Object[7];
                for(int i =0; i<medicineList.size(); i++)
                {
                    row[0] = medicineList.get(i).getMedicine();
                    row[1] = medicineList.get(i).getReference();
                    row[2] = medicineList.get(i).getName();
                    row[3] = medicineList.get(i).getCode();
                    row[4] = medicineList.get(i).getGram();
                    row[5] = medicineList.get(i).getCost();
                    row[6] = medicineList.get(i).getSellprice();
                    model.addRow(row);
                }
                
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "ModifyChuFang.show_table get error on line 328,"+ex.getMessage());
        }
    }
    
    public void Find()
    {
        model.setRowCount(0);
        String medicine = comboBoxMedicine.getSelectedItem().toString();
        String reference = MedicineReference();
        String name = MedicineName();
        
        Medicine medic = new Medicine();
        List<Medicine> medicineList = new ArrayList<Medicine>();
        try {
                medicineList = medic.getDetailMedicineReferenceName(medicine,reference,name,userid);
                model = (DefaultTableModel) tblStorage.getModel();
                Object row[] = new Object[7];
                for(int i =0; i<medicineList.size(); i++)
                {
                    row[0] = medicineList.get(i).getMedicine();
                    row[1] = medicineList.get(i).getReference();
                    row[2] = medicineList.get(i).getName();
                    row[3] = medicineList.get(i).getCode();
                    row[4] = medicineList.get(i).getGram();
                    row[5] = medicineList.get(i).getCost();
                    row[6] = medicineList.get(i).getSellprice();
                    model.addRow(row);
                }
                
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(rootPane, "ModifyChuFang.show_table get error on line 328,"+ex.getMessage());
        }
        
    }
    
    public void color_table()
    {
        tblStorage.setDefaultRenderer(Object.class, new PriorityCellRenderer());
        tblStorage.getTableHeader().setReorderingAllowed(false);
    }
    
    //change the colour
    public class PriorityCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            float weight = Float.parseFloat(table.getValueAt(row, 4).toString());
            
            if (weight >= 0 && weight <= 50) {
                setBackground(new Color(254, 115, 63));  // or background
            }
            else if(weight >= 50 && weight <= 120)
            {
                setBackground(new Color(254, 254, 63));  // or background
            }
            else
            {
                setBackground(new Color(151, 254, 63));  // or background
            }
            return this;
        }
    }
    
    public void widthTable()
    {
        this.lblName.setText(user.getUserid());
        JTableHeader tableHeader = tblStorage.getTableHeader();
        tableHeader.setFont(new Font("STXihei", Font.BOLD, 18));
    }
        
    public void image()
    {
        ImageIcon iconLogo = new ImageIcon(getClass().getResource("/menu/hengsengtong.png"));
        lbllogo.setIcon(iconLogo);
        ImageIcon iconBack = new ImageIcon(getClass().getResource("/menu/smallBack.png"));
        btnBack.setIcon(iconBack);
        ImageIcon iconFind = new ImageIcon(getClass().getResource("/menu/smallFind.png"));
        btnFindMedic.setIcon(iconFind);
        ImageIcon iconExcel = new ImageIcon(getClass().getResource("/menu/smallExcel.png"));
        btnExcel.setIcon(iconExcel);
        ImageIcon iconHeader = new ImageIcon(getClass().getResource("/menu/stockmedium.png"));
        findHeader.setIcon(iconHeader);
        ImageIcon iconReset = new ImageIcon(getClass().getResource("/menu/smallReset.png"));
        btnReset.setIcon(iconReset);
        this.lblName.setText(userid);
//        setResizable(false);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StorageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StorageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StorageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StorageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StorageForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnFindMedic;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> comboBoxMedicine;
    private javax.swing.JComboBox<String> comboBoxNameTraditionalPill;
    private javax.swing.JComboBox<String> comboBoxNameTraditionalPotion;
    private javax.swing.JComboBox<String> comboBoxReferenceTraditionalPill;
    private javax.swing.JComboBox<String> comboBoxReferenceTraditionalPotion;
    private javax.swing.JComboBox<String> comboMedicineNameGrassPill;
    private javax.swing.JComboBox<String> comboMedicineNameGrassPotion;
    private javax.swing.JComboBox<String> comboReferenceGrassPill;
    private javax.swing.JComboBox<String> comboReferenceGrassPotion;
    private javax.swing.JLabel findHeader;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lbllogo;
    private javax.swing.JPanel panelBody;
    private javax.swing.JPanel panelHeader;
    private javax.swing.JTable tblStorage;
    // End of variables declaration//GEN-END:variables
}
